// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#ifndef PROTOBUF_INCLUDED_result_2eproto
#define PROTOBUF_INCLUDED_result_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_result_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_result_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_result_2eproto();
namespace eap {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace eap
namespace google {
namespace protobuf {
template<> ::eap::Action* Arena::CreateMaybeMessage<::eap::Action>(Arena*);
template<> ::eap::Result* Arena::CreateMaybeMessage<::eap::Result>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace eap {

enum Action_Type {
  Action_Type_MOVEMENT = 0,
  Action_Type_ATTACK = 1,
  Action_Type_Action_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Action_Type_Action_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Action_Type_IsValid(int value);
const Action_Type Action_Type_Type_MIN = Action_Type_MOVEMENT;
const Action_Type Action_Type_Type_MAX = Action_Type_ATTACK;
const int Action_Type_Type_ARRAYSIZE = Action_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor();
inline const ::std::string& Action_Type_Name(Action_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_Type_descriptor(), value);
}
inline bool Action_Type_Parse(
    const ::std::string& name, Action_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_Type>(
    Action_Type_descriptor(), name, value);
}
// ===================================================================

class Action final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eap.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_Type Type;
  static const Type MOVEMENT =
    Action_Type_MOVEMENT;
  static const Type ATTACK =
    Action_Type_ATTACK;
  static inline bool Type_IsValid(int value) {
    return Action_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Action_Type_Type_MIN;
  static const Type Type_MAX =
    Action_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Action_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Action_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Action_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Action_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .eap.Position target_position = 2;
  bool has_target_position() const;
  void clear_target_position();
  static const int kTargetPositionFieldNumber = 2;
  const ::eap::Position& target_position() const;
  ::eap::Position* release_target_position();
  ::eap::Position* mutable_target_position();
  void set_allocated_target_position(::eap::Position* target_position);

  // int32 entity_id = 1;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entity_id() const;
  void set_entity_id(::google::protobuf::int32 value);

  // .eap.Action.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::eap::Action_Type type() const;
  void set_type(::eap::Action_Type value);

  // @@protoc_insertion_point(class_scope:eap.Action)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eap::Position* target_position_;
  ::google::protobuf::int32 entity_id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eap.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eap.Action actions = 1;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 1;
  ::eap::Action* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::eap::Action >*
      mutable_actions();
  const ::eap::Action& actions(int index) const;
  ::eap::Action* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::eap::Action >&
      actions() const;

  // @@protoc_insertion_point(class_scope:eap.Result)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eap::Action > actions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_result_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Action

// int32 entity_id = 1;
inline void Action::clear_entity_id() {
  entity_id_ = 0;
}
inline ::google::protobuf::int32 Action::entity_id() const {
  // @@protoc_insertion_point(field_get:eap.Action.entity_id)
  return entity_id_;
}
inline void Action::set_entity_id(::google::protobuf::int32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:eap.Action.entity_id)
}

// .eap.Position target_position = 2;
inline bool Action::has_target_position() const {
  return this != internal_default_instance() && target_position_ != nullptr;
}
inline const ::eap::Position& Action::target_position() const {
  const ::eap::Position* p = target_position_;
  // @@protoc_insertion_point(field_get:eap.Action.target_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::eap::Position*>(
      &::eap::_Position_default_instance_);
}
inline ::eap::Position* Action::release_target_position() {
  // @@protoc_insertion_point(field_release:eap.Action.target_position)
  
  ::eap::Position* temp = target_position_;
  target_position_ = nullptr;
  return temp;
}
inline ::eap::Position* Action::mutable_target_position() {
  
  if (target_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::eap::Position>(GetArenaNoVirtual());
    target_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:eap.Action.target_position)
  return target_position_;
}
inline void Action::set_allocated_target_position(::eap::Position* target_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_position_);
  }
  if (target_position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_position, submessage_arena);
    }
    
  } else {
    
  }
  target_position_ = target_position;
  // @@protoc_insertion_point(field_set_allocated:eap.Action.target_position)
}

// .eap.Action.Type type = 3;
inline void Action::clear_type() {
  type_ = 0;
}
inline ::eap::Action_Type Action::type() const {
  // @@protoc_insertion_point(field_get:eap.Action.type)
  return static_cast< ::eap::Action_Type >(type_);
}
inline void Action::set_type(::eap::Action_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eap.Action.type)
}

// -------------------------------------------------------------------

// Result

// repeated .eap.Action actions = 1;
inline int Result::actions_size() const {
  return actions_.size();
}
inline void Result::clear_actions() {
  actions_.Clear();
}
inline ::eap::Action* Result::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:eap.Result.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::eap::Action >*
Result::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:eap.Result.actions)
  return &actions_;
}
inline const ::eap::Action& Result::actions(int index) const {
  // @@protoc_insertion_point(field_get:eap.Result.actions)
  return actions_.Get(index);
}
inline ::eap::Action* Result::add_actions() {
  // @@protoc_insertion_point(field_add:eap.Result.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::eap::Action >&
Result::actions() const {
  // @@protoc_insertion_point(field_list:eap.Result.actions)
  return actions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eap

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eap::Action_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eap::Action_Type>() {
  return ::eap::Action_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_result_2eproto
